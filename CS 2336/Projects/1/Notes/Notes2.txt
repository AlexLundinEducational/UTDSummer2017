Replace odd lines
//https://stackoverflow.com/questions/17735289/delete-every-other-line-in-notepad       
		
jbButtons		
mainButtons		
		
		
jlOutput		
resultField		
		
		
		
		
		double result = 0;
         
            //Search for entered key
        for (int i = 0; i < jbButtons.length; i++)
        {
            if(e.getSource() == jbButtons[i])
            {
                switch(i)
                {
				case 0:
					//quot
					break;
				case 1:
					//mod
					if (displayMode != ERROR_MODE)
					{
						try
						{
							result = getNumberInDisplay() / 100;
							displayResult(result);
						}
						catch(Exception ex)
						{
							displayError("Invalid input for function.");
							displayMode = ERROR_MODE;
						}
					}	
					break;
				case 2:
					//A
					break;
				case 3:
					break;
				case 4:
					break;
				case 5:
					break;
				case 6:
					break;
				case 7:
					break;
				case 8:
					break;
				case 9:
					break;
				case 10:
					//B
					break;
				case 11:
					//backspace
					break;
				case 12:
					clearExisting();
					break;
				case 13:
					clearAll();
					break;
				case 14:
					processSignChange();
					break;
				case 15:
					//sqrt
					if (displayMode != ERROR_MODE)
					{
						try
						{
							if (getDisplayString().indexOf("-") == 0)
								displayError("Invalid input for function.");
							 
							result = Math.sqrt(getNumberInDisplay());
							displayResult(result);
						}
						catch(Exception ex)
						{
							displayError("Invalid input for function.");
							displayMode = ERROR_MODE;
						}
					}	
					break;
				case 16:
					break;
				case 17:
					break;
				case 18:
					//C
					break;
				case 19:
					//7
					addDigitToDisplay(i);
					break;
				case 20:
					//8
					addDigitToDisplay(i);
					break;
				case 21:
					//9
					addDigitToDisplay(i);
					break;
				case 22:
					//Divide
					processOperator("/");
					break;
				case 23:
					//mod
					if (displayMode != ERROR_MODE)
					{
						try
						{
							result = getNumberInDisplay() / 100;
							displayResult(result);
						}
						catch(Exception ex)
						{
							displayError("Invalid input for function.");
							displayMode = ERROR_MODE;
						}
					}	
					break;
				case 24:
					break;
				case 25:
					break;
				case 26:
					//D
					break;
				case 27:
					//4
					addDigitToDisplay(i);
					break;
				case 28:
					//5
					addDigitToDisplay(i);
					break;
				case 29:
					//6
					addDigitToDisplay(i);
					break;
				case 30:
					//*
					processOperator("*");
					break;
				case 31:
					//recip
					if (displayMode != ERROR_MODE)
					{
						try
						{
							if (getNumberInDisplay() == 0)
								displayError("Cannot divide by zero.");
							result = 1 / getNumberInDisplay();
							displayResult(result);
						}
						catch(Exception ex)
						{
							displayError("Cannot divide by zero.");
							displayMode = ERROR_MODE;
						}
					}	
					
					break;
				case 32:
					break;
				case 33:
					break;
				case 34:
					//E
					break;
				case 35:
					//1
					addDigitToDisplay(i);
					break;
				case 36:
					//2
					addDigitToDisplay(i);
					break;
				case 37:
					//3
					addDigitToDisplay(i);
					break;
				case 38:
					// - 
					processOperator("-");
					break;
				case 39:
					//=
					processEquals();
					break;
				case 40:
					break;
				case 41:
					break;
				case 42:
					//F
					break;
				case 43:
					//0
					addDigitToDisplay(i);
					break;
				case 44:
					//.
					addDecimalPoint();
					break;
				case 45:
					//+
					processOperator("+");
					break;
                }
            }
        }
         
        private void addToMemory()
        {
        //needs code   
         
        }
 
        private void storeInMemory()
        {
        //needs code   
        }
 
        private void recallMemory()
        {
        //needs code
        }
 
        private void clearMemory()
        {
        //needs code
        }
 
        void setDisplayString(String s)
        {
            jlOutput.setText(s);
        }
         
        String getDisplayString()
        {
            return jlOutput.getText();
        }
         
        void addDigitToDisplay(int digit)
        {
            if (clearOnNextDigit)
            {
                setDisplayString("");
            }
            String inputString = getDisplayString();
            if (inputString.indexOf("0") == 0)
            {
                inputString = inputString.substring(1);
            }
            if ((!inputString.equals("0") || digit > 0) && inputString.length() < MAX_INPUT_LENGTH)
            {
                setDisplayString(inputString + digit);
            }
            displayMode = INPUT_MODE;
            clearOnNextDigit = false;
        }
         
        void addDecimalPoint()
        {
            displayMode = INPUT_MODE;
            if (clearOnNextDigit)
            {
                setDisplayString("");
            }
            String inputString = getDisplayString();
            if (inputString.indexOf(".") < 0)
            {
                setDisplayString(new String(inputString + "."));
            }
        }
         
        void processSignChange()
        {
            if (displayMode == INPUT_MODE)
            {
                String input = getDisplayString();
                if (input.length() > 0 && !input.equals("0"))
                {
                    if(input.indexOf("-") == 0)
                    {
                        setDisplayString(input.substring(1));
                    }
                    else
                    {
                        setDisplayString("-" + input);
                    }
                }
            }
        }
         
        void clearAll()
        {
            setDisplayString("0");
            lastOperator = "0";
            lastNumber = 0;
            displayMode = INPUT_MODE;
            clearOnNextDigit = true;
        }
         
        void clearExisting()
        {
            setDisplayString("0");
            clearOnNextDigit = true;
            displayMode = INPUT_MODE;
        }
         
        double getNumberInDisplay()
        {
            String input = jlOutput.getText();
            return Double.parseDouble(input);
        }
         
        void processOperator(String op)
        {
            if (displayMode != ERROR_MODE)
            {
                double numberInDisplay = getNumberInDisplay();
                if (!lastOperator.equals("0"))
                {
                    try
                    {
                        double result = processLastOperator();
                        displayResult(result);
                        lastNumber = result;
                    }
                    catch (DivideByZeroException e)
                    {
                        displayError("Cannot divide by sero.");
                    }
                }
                else
                {
                    lastNumber = numberInDisplay;
                }
                clearOnNextDigit = true;
                lastOperator = op;
            }
        }
         
        void processEquals()
        {
            double result= 0;
            if (displayMode != ERROR_MODE)
            {
                try
                {
                    result = processLastOperator();
                    displayResult(result);
                }
                catch (DivideByZeroException e)
                {
                    displayError("Cannot divide by sero.");
                }
                lastOperator = "0";
            }
        }
         
        double processLastOperator() throws DivideByZeroException
        {
            double result = 0;
            double numberInDisplay = getNumberInDisplay();
            if (lastOperator.equals("/"))
            {
                if (numberInDisplay == 0)
                {
                    throw (new DivideByZeroException());
                }
                result = lastNumber/numberInDisplay;
            }
            if (lastOperator.equals("*"))
            {
                result = lastNumber * numberInDisplay;
            }
            if (lastOperator.equals("-"))
            {
                result = lastNumber - numberInDisplay;
            }
            if (lastOperator.equals("+"))
            {
                result = lastNumber + numberInDisplay;
            }
            return result;
        }
         
        void displayResult(double result)
        {
            setDisplayString(Double.toString(result));
            lastNumber = result;
            displayMode = RESULT_MODE;
            clearOnNextDigit = true;
        }
         
        void displayError(String errorMessage)
        {
            setDisplayString(errorMessage);
            lastNumber = 0;
            displayMode = ERROR_MODE;
            clearOnNextDigit = true;
        }
